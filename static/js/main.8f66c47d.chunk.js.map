{"version":3,"sources":["App.js","serviceWorker.js","index.js","plus.svg"],"names":["App","props","id","autocomplete","type","placeholder","onChange","value","newItem","aria-label","alt","src","add","onClick","array","map","item","key","deleteItem","document","addEventListener","event","keyCode","Boolean","window","location","hostname","match","Index","state","handleChange","bind","handleClick","querySelector","focus","e","this","setState","target","newItemObject","Math","random","arrayCopy","push","updatedArray","filter","React","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kTAsDeA,MAlDf,SAAaC,GACT,OACI,6BACI,wCAAa,0BAAMC,GAAG,qBAAT,MAEb,yBAAKA,GAAG,mBACJ,2BACIA,GAAG,aACHC,aAAa,MACbC,KAAK,OACLC,YAAY,qBACZC,SAAUL,EAAMK,SAChBC,MAAON,EAAMO,QACbC,aAAW,6BAGf,yBACIP,GAAG,aACHQ,IAAI,aACJC,IAAKC,IACLC,QAASZ,EAAMY,WAItBZ,EAAMa,MAAMC,KAAI,SAAAC,GAAI,OACnB,yBAAKd,GAAG,kBACJ,wBAAIe,IAAKD,EAAKd,IACV,0BAAMA,GAAG,gBAAT,KACA,0BAAMA,GAAG,aAAac,EAAKT,QAE/B,yBACML,GAAG,gBACHQ,IAAI,gBACJC,IAAKC,IACLC,QAAS,kBAAMZ,EAAMiB,WAAWF,EAAKd,WAKhDiB,SAASC,iBAAiB,SAAS,SAASC,GAEjB,KAAlBA,EAAMC,SACRrB,EAAMY,eClCNU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZAC,E,YAKL,WAAY3B,GAAQ,IAAD,8BAClB,4CAAMA,KACD4B,MAAQ,CACZf,MAAO,GACPN,QAAS,IAEV,EAAKsB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKb,WAAa,EAAKA,WAAWa,KAAhB,gBARA,E,iFAHlBZ,SAASc,cAAc,eAAeC,Y,kDAc1BC,GACZC,KAAKC,SAAS,CAAE7B,QAAS2B,EAAEG,OAAO/B,U,oCAIlC,GAAG6B,KAAKP,MAAMrB,QAAS,CACtB,IAAI+B,EAAgB,CACnBrC,GAAI,EAAIsC,KAAKC,SACblC,MAAO6B,KAAKP,MAAMrB,SAEfkC,EAAS,YAAON,KAAKP,MAAMf,OAC/B4B,EAAUC,KAAKJ,GACfH,KAAKC,SAAS,CACbvB,MAAO4B,EACPlC,QAAS,KAEVW,SAASc,cAAc,eAAeC,W,iCAI7BhC,GACV,IACI0C,EADS,YAAOR,KAAKP,MAAMf,OACF+B,QAAO,SAAA7B,GAAI,OAAIA,EAAKd,KAAOA,KACxDkC,KAAKC,SAAS,CAAEvB,MAAO8B,M,+BAIvB,OAAO,kBAAC,EAAD,CAAK9B,MAAOsB,KAAKP,MAAMf,MAAOR,SAAU8B,KAAKN,aAAcjB,QAASuB,KAAKJ,YAAaxB,QAAS4B,KAAKP,MAAMrB,QAASU,WAAYkB,KAAKlB,iB,GA3CzH4B,IAAMC,WA+C1BC,IAASC,OAAO,kBAAC,EAAD,MAAW9B,SAAS+B,eAAe,SD8E7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.8f66c47d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport add from './plus.svg'\n\nfunction App(props) {\n    return (\n        <div>\n            <h1>Reminders<span id=\"heading-full-stop\">.</span></h1>\n\n            <div id=\"input-container\">\n                <input\n                    id=\"text-input\"\n                    autocomplete=\"off\"\n                    type=\"text\"\n                    placeholder=\"Type a reminder...\"\n                    onChange={props.onChange}\n                    value={props.newItem}\n                    aria-label=\"Type your reminders here\"\n                />\n\n                <img \n                    id=\"add-button\"\n                    alt=\"add button\"\n                    src={add}\n                    onClick={props.onClick}\n                />\n            </div>\n\n            {props.array.map(item => \n              <div id=\"item-container\">\n                  <li key={item.id}>\n                      <span id=\"bullet-point\">.</span>\n                      <span id=\"list-text\">{item.value}</span>\n                  </li>\n                  <img \n                        id=\"remove-button\"\n                        alt=\"remove button\"\n                        src={add} \n                        onClick={() => props.deleteItem(item.id)} \n                  />\n              </div>\n            )}\n\n            {document.addEventListener(\"keyup\", function(event) {\n              // Number 13 is the \"Enter\" key on the keyboard\n                  if (event.keyCode === 13) {\n                    props.onClick();\n                  }\n              })\n            }\n        </div>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Index extends React.Component {\n\tcomponentDidMount() {\n\t\tdocument.querySelector(\"#text-input\").focus();\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t\tnewItem: \"\"\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.deleteItem = this.deleteItem.bind(this);\n\t}\n\n\thandleChange(e) {\n\t\tthis.setState({ newItem: e.target.value });\n\t}\n\n\thandleClick() {\n\t\tif(this.state.newItem) {\n\t\t\tvar newItemObject = {\n\t\t\t\tid: 1 + Math.random(),\n\t\t\t\tvalue: this.state.newItem\n\t\t\t}\n\t\t\tvar arrayCopy = [...this.state.array];\n\t\t\tarrayCopy.push(newItemObject);\n\t\t\tthis.setState({ \n\t\t\t\tarray: arrayCopy,\n\t\t\t\tnewItem: \"\"\n\t\t\t});\n\t\t\tdocument.querySelector(\"#text-input\").focus();\n\t\t}\n\t}\n\n\tdeleteItem(id) {\n\t\tvar arrayCopy = [...this.state.array];\n\t\tvar updatedArray = arrayCopy.filter(item => item.id !== id)\n\t\tthis.setState({ array: updatedArray });\n\t}\n\n\trender() {\n\t\treturn <App array={this.state.array} onChange={this.handleChange} onClick={this.handleClick} newItem={this.state.newItem} deleteItem={this.deleteItem}/>\n\t}\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/plus.a5cdd35d.svg\";"],"sourceRoot":""}